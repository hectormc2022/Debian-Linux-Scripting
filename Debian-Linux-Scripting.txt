
El Kernel de Linux 
Funciones del Kernel de Linux
•	Administración de la Memoria
•	Administra el tiempo del procesador
•	Acceso a los periféricos 

Estructura jerárquica 
Todo comienza desde la carpeta root, existen directorios estándar que tienen la misma función
/user - 	Contiene los directorios de usuario
/var – Contiene archivos de tamaño variable se utiliza para archivos de trazas
/bin, /user/bin – Contiene archivos binarios 
/dev – Representan dispositivos
/etc – Archivos de conexión a la base de datos o de aplicaciones
/lib, /usr/lib – Contienen los o las librerías dinámicas
/prompt – Contiene información de los procesos activos
/sbin – Contiene archivos de binarios de super usuario
/ - Contiene los directorios de trabajo de los usuarios en el sistema




Learn Bash programming for Linux, Unix & Mac

File operators (tests)

-d File  True if file is a directory
-e File  True if file exists
-f File True if file exists and is a regular file.
-r File True if file is readable by you
-s File True if file exists and is not empty
-w File True if the file is writable by you
-x File True if the file is executable by you

Variable 
  VARIABLE_NAME="Value"
  $VARIABLE_NAME
  ${VARIABLE_NAME}
  VARIABLE_NAME=$(command)

Positional Parameters:
  $0, $1, $2, ... $9
  $@

Comments start with #
Use read to accept input


-z STRING True if string is empty
-n STRING True if string is not empty
STRING1 = STRING2 
  True if the strings are equal
STRING1 != STRING2
  True if the strings are not equal

----- [ If condition ]
If [ condition-is-true]
then 
  command 1
  command 2
  command N
fi


#!/bin/bash
MY_SHELL=”bash”

If [ “MY_SHELL” = “bash” ]
then 
  echo “You see to like the bash shell.”
fi

---- [ Else condition 

if [ condition-is-true ]
then 
  command N
else 
  command N
fi

#!/bin/bash
MY_SHELL=”bash”
If [ “MY_SHELL” = “bash” ]
then 
  echo “You see to like the bash shell.”
else
  echo “You don’t see to like the bash shell”
fi

if/elif/else
if [ condition-is-true ]
then 
  command N
elseif [ condition-is-true ]
then
  command N
else 
  command N
fi


#!/bin/bash
MY_SHELL=”bash”
If [ “$MY_SHELL” = “bash” ]
then 
  echo “You see to like the bash shell.”
else
  echo “You don’t see to like the bash shell”
fi

Acceping User Input (STDIN)
Syntax :
  read -p "PROMPT" VARIABLE

Exit Status / Return Code
•	Every command returns and exit status
•	Range from 0 to 255
•	0 = success
•	Other than 0 = error condition
•	Use for error checking
•	Use man or info to find meaning of exit status

Checking the Exit Status
•	$? contains the return code of the previously executed command.

HOST="google.com"
ping -c 1 $HOST
if [ "$?" -eq "0" ]
then
    echo "$HOST reachable."
else
    echo "$HOST unreachable."
fi

HOST="google.com"
ping -c 1 $HOST
if [ "$?" -ne "0" ]
then
    echo "$HOST unreachable."
fi

HOST="google.com"
ping -c 1 $HOST
RETURN_CODE=$?
if [ "RETURN_CODE" -ne "0" ]
then
    echo "$HOST unreachable."
fi

&& AND ||
•	&& = AND
mkdir /tmp/bak && cp test.txt /tmp/bak/

•	|| = OR
cp test.txt /tmp/bak/ || cp test.txt /tmp

#!/bin/bash
HOST="google.com"
ping -c 1 $HOST $$ echo "$HOST reachable."

Separate commands with a semicolon to ensure they all get executed
cp test.txt /tmp/bak/ ; cp test.txt /tmp

#Same as:

cp test.txt /tmp/bak
cp test.txt /tmp

Exit Command
• Explicitly define the return code
  • exit 0
  • exit 1
  • exit 2
  • exit 255
  • etc...
• The default value is that of the last command executed.

#!/bin/bash
HOST="google.com"
ping -c 1 $HOST
if ["$?" -ne "0"]
then
  echo "$HOST unreachable"
  exit 1
fi
exit 0

------------- Summary ------------
• All command return an exit status
• 0-255
• 0 = success
• Other than 0 = error condition
• $? contains the exit status
• Decision making - if, && , ||
• exit

----------- Exit Status -----------















